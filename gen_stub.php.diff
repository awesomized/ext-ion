diff --git a/build/gen_stub.php b/build/gen_stub.php
index 5f74d26dbc3..01a19988161 100755
--- a/build/gen_stub.php
+++ b/build/gen_stub.php
@@ -793,7 +793,7 @@ class FunctionName implements FunctionOrMethodName {
     }
 
     public function getDeclarationName(): string {
-        return $this->name->getLast();
+        return strtr($this->name->toString(), "\\", "_");
     }
 
     public function getDeclaration(): string {
@@ -1152,8 +1152,8 @@ class FuncInfo {
             if ($namespace) {
                 // Render A\B as "A\\B" in C strings for namespaces
                 return sprintf(
-                    "\tZEND_NS_FE(\"%s\", %s, %s)\n",
-                    addslashes($namespace), $declarationName, $this->getArgInfoName());
+                    "\tZEND_NS_RAW_FENTRY(\"%s\", \"%s\", ZEND_FN(%s), %s, 0)\n",
+                    addslashes($namespace), substr((string)$this->name, strlen($namespace)+1), $declarationName, $this->getArgInfoName());
             } else {
                 return sprintf("\tZEND_FE(%s, %s)\n", $declarationName, $this->getArgInfoName());
             }
@@ -1608,7 +1608,7 @@ class EnumCaseInfo {
     public function getDeclaration(): string {
         $escapedName = addslashes($this->name);
         if ($this->value === null) {
-            $code = "\n\tzend_enum_add_case_cstr(class_entry, \"$escapedName\", NULL);\n";
+            $code = "\tzend_enum_add_case_cstr(class_entry, \"$escapedName\", NULL);\n";
         } else {
             $evaluator = new ConstExprEvaluator(function (Expr $expr) {
                 throw new Exception("Enum case $this->name has an unsupported value");
@@ -2369,7 +2369,7 @@ function parseFunctionLike(
 function parseProperty(
     Name $class,
     int $flags,
-    Stmt\PropertyProperty $property,
+    Stmt\PropertyProperty|Node\Param $property,
     ?Node $type,
     ?DocComment $comment,
     PrettyPrinterAbstract $prettyPrinter
@@ -2404,13 +2404,23 @@ function parseProperty(
         }
     }
 
+    $default = $property->default;
+    if ($property instanceof Node\Param) {
+        $name = $property->var->name;
+        if ($property->flags & Stmt\Class_::MODIFIER_READONLY) {
+            $default = null;
+        }
+    } else {
+        $name = $property->name;
+    }
+
     return new PropertyInfo(
-        new PropertyName($class, $property->name->__toString()),
+        new PropertyName($class, (string) $name),
         $flags,
         $propertyType,
         $phpDocType ? Type::fromString($phpDocType) : null,
-        $property->default,
-        $property->default ? $prettyPrinter->prettyPrintExpr($property->default) : null,
+        $default,
+        $default ? $prettyPrinter->prettyPrintExpr($default) : null,
         $isDocReadonly
     );
 }
@@ -2594,6 +2604,20 @@ function handleStatements(FileInfo $fileInfo, array $stmts, PrettyPrinterAbstrac
                         $classStmt,
                         $cond
                     );
+                    if ($classStmt->name->toString() === "__construct") {
+                        foreach ($classStmt->params as $param) {
+                            if ($param->flags) {
+                                $propertyInfos[] = parseProperty(
+                                    $className,
+                                    $param->flags,
+                                    $param,
+                                    $param->type,
+                                    $param->getDocComment(),
+                                    $prettyPrinter
+                                );
+                            }
+                        }
+                    }
                 } else if ($classStmt instanceof Stmt\EnumCase) {
                     $enumCaseInfos[] = new EnumCaseInfo(
                         $classStmt->name->toString(), $classStmt->expr);
